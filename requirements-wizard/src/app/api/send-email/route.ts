import { NextRequest, NextResponse } from 'next/server'

interface EmailRequest {
  subject: string
  markdown: string
  projectName: string
  submissionId: string
}

export async function POST(request: NextRequest) {
  try {
    const body: EmailRequest = await request.json()
    const { subject, markdown, projectName, submissionId } = body

    // Validate required fields
    if (!subject || !markdown || !projectName) {
      return NextResponse.json(
        { success: false, error: 'Missing required fields' },
        { status: 400 }
      )
    }

    // Create the email content with proper formatting
    const emailBody = `Hi,

I've generated a comprehensive project scope for the ${projectName} website using the Requirements Wizard.

The complete project scope document is attached as SCOPE.md.

Generated by Requirements Wizard
Submission ID: ${submissionId}

---

If you can't see the attachment, here's the content:

${markdown}`

    // Create a data URL for the markdown file
    const markdownBlob = Buffer.from(markdown).toString('base64')
    const dataUrl = `data:text/markdown;base64,${markdownBlob}`
    
    // Create filename
    const filename = `${projectName.replace(/[^a-zA-Z0-9]/g, '_')}_SCOPE.md`

    // For now, we'll use mailto with the content in the body
    // In a production app, you might integrate with an email service like SendGrid, Nodemailer, etc.
    const mailtoUrl = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailBody)}`

    // Return success with the mailto URL
    return NextResponse.json({
      success: true,
      mailtoUrl,
      filename,
      message: 'Email prepared successfully'
    })

  } catch (error) {
    console.error('Email API error:', error)
    return NextResponse.json(
      { success: false, error: 'Failed to prepare email' },
      { status: 500 }
    )
  }
}

// Handle OPTIONS for CORS
export async function OPTIONS() {
  return new NextResponse(null, {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'POST, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    },
  })
}
